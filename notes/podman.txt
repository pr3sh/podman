


$ sudo Rodman search rhel
$ sudo podman pull <image_name>
$ sudo Rodman run  rhel7:7.5 echo "Hello world"

# List containers
$ sudo podman ps 


Options:
-t or --tty meaning (pseudo-terminal)
-I or --interactive 
-d or --detach, means the container runs in the background
-- name

-e helps specify environment variables

I.e: $ sudo podman run --name mysql-custom \
	-e MYSQL_USER=redhat -e MYSQL_PASSWORD=r3dhat \
	-e MYSQL_DATABASE=items  -e MYSQL_ROOT_PASSWORD=r00tpa55 
	-d rhscl/mysql-57-rhel:5.7-3.14

# connect to database within container
$ mysql -uroot

# Verify containers started without errors
$ sudo Rodman ps --format "{{.ID}} {{.Images}} {{.Names}}"

$ sudo podman ps 
$ sudo podman ps -a
$ sudo podman exec -it mysql-custom /bin/bash

# The exec command starts an additional process inside an already running container
$ sudo podman exec <container_id> cat/etc/hostname


# You can skip writing container ID or nee in later Podman commands by replace container ID with -l option
$ sudo podman exec -l

# Inspect lists metadata about running or stopped container
$ sudo podman inspect my-httpd-container

# inspect http container json file and find IPAddress field
$ sudo podman inspect -f '{{.NetworkSettings.IPAddress}}' my-httpd-container

# stop running container
$ sudo podman stop <container>
$ sudo podman kill <container>

# You can specify the Unix signal to be sent to the main process. 
# Podman accepts either the signal name and number

$ sudo podman kill -s SIGKILL <container_name>

# Restart a stopped container
$ sudo podman restart <container_name>

# deletes a container nd discordes its state and file system
$ sudo podman rm <container_name>
$ sudo podman rm -a remove all available containers or images

# Before deleting all containers all running containers must be in a "stopped" status
$ sudo podman stop -a

########################################################################################
#Creating Persistent Storage


# Create directory with owner and group root
# grant write access to the directory for MYSQL service which has a UID of 27
# Apply `container_file_t` context to the directory(all all subdirectories) to allow containers access to all of its contents
# Apply SELinux container policy
# Mount volume within container
#confirm policy was applied

$ sudo mkdir -pv /var/dbfiles
$ sudo chown -Rv 27:27 /var/dbfiles
$ sudo semanage fcontext -a -t container_file_t 'var/dbfiles(/.*)?'
$ sudo restorecon -R /var/dbfiles/
$ ls -dZ /var/dbfiles

##########################################################################################
#accessing container

$ sudo podman run -d --name apache4 -p 80 httpd:2.4

# To see ports assigned by podman
$ sudo podman port apache3

ie.
$ sudo podman run --name mysqldb-port -e MYSQL_USER=user -e MYSQL_PASSWORD=mypa55 \
	-e MYSQL_DATABASE=items -e MYSQL_ROOT_PASSWORD=r00tpa55 -p 13306:3306 -d  \
	-v /var/local/mysql:/var/lib/mysql/data rascal/mysql-57-rhel7 




#####################################################

#Podman search command finds images by image name, user name., or description from all
registeries listed in the /etc/containers/registries.conf configuration file 

$ sudo podman search [options]	

#manipulting container images


$ sudo podman save [-o FILE_NAME] IMAGE_NAME[:TAG]
$ sudo podman save -o mysql.tar registry.access.redhat.com/rhscl/mysql-57-rhel7
$ sudo podman load -I mysql.tar
$ sudo poems rmi [OPTIONS] IMAGE [IMAGE....]
$ sudo podman rmi -a #delete all images not currently being used by a container, risky!

$ sudo podman commit [OPTIONS] CONTAINER \
 	[REPOSITORY[:PORT]/]IMAGE[:TAG]

Options: --author  ""  # Identifies who created the container image .
	 --message ""  # Includes a commit message to the registry.
	 --format      # Selects the format for the image.
		       # Valid options are oci and docker.

$ sudo podman ps
$ sudo podman diff <image_name>

$ sudo podman tag [OPTIONS] IMAGE[:TAG] [REGISTRY/][USERNAME/]NAME[:TAG]
$ sudo podman tag mysql-custom devops/mysql:snapshot
$ sudo podman rmi devops/mysql:snapshot   #remove tag from image
$ sudo podman push [OPTIONS] IMAGE [DESTINATION] #if we don't specify destination,podman will use one of the default registries.
$ sudo podman


















